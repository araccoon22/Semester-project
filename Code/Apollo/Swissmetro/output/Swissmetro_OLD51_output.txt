Model run by alexi using Apollo 0.3.2 on R 4.2.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : Swissmetro
Model description                           : Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space
Model run at                                : 2024-05-13 10:41:23
Estimation method                           : bfgs
Model diagnosis                             : successful convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -7.467898
     reciprocal of condition number         : 0.0206645
Number of individuals                       : 752
Number of rows in database                  : 6768
Number of modelled outcomes                 : 6768

Number of cores used                        :  4 
Number of inter-individual draws            : 100 (halton)

LL(start)                                   : -5529.61
LL at equal shares, LL(0)                   : -6964.66
LL at observed shares, LL(C)                : -5865
LL(final)                                   : -3928.34
Rho-squared vs equal shares                  :  0.436 
Adj.Rho-squared vs equal shares              :  0.4351 
Rho-squared vs observed shares               :  0.3302 
Adj.Rho-squared vs observed shares           :  0.3295 
AIC                                         :  7868.68 
BIC                                         :  7909.6 

Estimated parameters                        : 6
Time taken (hh:mm:ss)                       :  00:00:51.24 
     pre-estimation                         :  00:00:17 
     estimation                             :  00:00:20 
          initial estimation                :  00:00:16.95 
          estimation after rescaling        :  00:00:3.06 
     post-estimation                        :  00:00:14.24 
Iterations                                  :  26  
     initial estimation                     :  25 
     estimation after rescaling             :  1 

Unconstrained optimisation.

Estimates:
             Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
ASC_CAR        0.3535     0.07369       4.797      0.1373         2.575
ASC_TRAIN     -0.4227     0.08771      -4.819      0.1422        -2.973
ASC_SM         0.0000          NA          NA          NA            NA
B_COST        -4.1340     0.24743     -16.708      0.3043       -13.583
B_COST_S       4.6113     0.25319      18.212      0.3073        15.006
B_TIME        -4.3257     0.18578     -23.284      0.2260       -19.136
B_TIME_S       4.5373     0.19116      23.735      0.2361        19.220


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  6768.00 6768.00 5607.00
Times chosen                      908.00 4090.00 1770.00
Percentage chosen overall          13.42   60.43   26.15
Percentage chosen when available   13.42   60.43   31.57



Classical covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.005430    0.003461  -1.360e-05    0.001199   -0.004381
ASC_TRAIN    0.003461    0.007693    0.001219  5.2287e-04   -0.003640
B_COST     -1.360e-05    0.001219    0.061222   -0.050812    0.016325
B_COST_S     0.001199  5.2287e-04   -0.050812    0.064106   -0.018839
B_TIME      -0.004381   -0.003640    0.016325   -0.018839    0.034514
B_TIME_S     0.003867    0.002704   -0.017181    0.020493   -0.032586
             B_TIME_S
ASC_CAR      0.003867
ASC_TRAIN    0.002704
B_COST      -0.017181
B_COST_S     0.020493
B_TIME      -0.032586
B_TIME_S     0.036543

Robust covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.018845    0.010062  1.5585e-04    0.003201    -0.01303
ASC_TRAIN    0.010062    0.020215   -0.003554    0.007905    -0.01234
B_COST     1.5585e-04   -0.003554    0.092621   -0.078779     0.03106
B_COST_S     0.003201    0.007905   -0.078779    0.094434    -0.03567
B_TIME      -0.013034   -0.012341    0.031056   -0.035666     0.05110
B_TIME_S     0.012233    0.012727   -0.033975    0.039145    -0.05262
             B_TIME_S
ASC_CAR       0.01223
ASC_TRAIN     0.01273
B_COST       -0.03398
B_COST_S      0.03914
B_TIME       -0.05262
B_TIME_S      0.05573

Classical correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000     0.53559 -7.4613e-04     0.06426     -0.3201
ASC_TRAIN     0.53559     1.00000     0.05619     0.02355     -0.2234
B_COST    -7.4613e-04     0.05619     1.00000    -0.81107      0.3551
B_COST_S      0.06426     0.02355    -0.81107     1.00000     -0.4005
B_TIME       -0.32005    -0.22338     0.35515    -0.40052      1.0000
B_TIME_S      0.27453     0.16126    -0.36323     0.42341     -0.9175
             B_TIME_S
ASC_CAR        0.2745
ASC_TRAIN      0.1613
B_COST        -0.3632
B_COST_S       0.4234
B_TIME        -0.9175
B_TIME_S       1.0000

Robust correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      1.000000     0.51552    0.003730     0.07587     -0.4200
ASC_TRAIN    0.515525     1.00000   -0.082138     0.18093     -0.3840
B_COST       0.003730    -0.08214    1.000000    -0.84235      0.4514
B_COST_S     0.075874     0.18093   -0.842349     1.00000     -0.5134
B_TIME      -0.420021    -0.38399    0.451424    -0.51344      1.0000
B_TIME_S     0.377479     0.37918   -0.472885     0.53958     -0.9860
             B_TIME_S
ASC_CAR        0.3775
ASC_TRAIN      0.3792
B_COST        -0.4729
B_COST_S       0.5396
B_TIME        -0.9860
B_TIME_S       1.0000

 20 worst outliers in terms of lowest average per choice prediction:
  ID Avg prob per choice
 394           0.1742424
 362           0.1929847
  58           0.2019458
  23           0.2056827
 783           0.2069934
  19           0.2083827
 360           0.2133648
 283           0.2160021
 843           0.2164229
 352           0.2287145
 389           0.2294424
  63           0.2331861
 321           0.2429425
 351           0.2440379
 681           0.2446456
 341           0.2535865
  87           0.2551724
 101           0.2593796
 739           0.2594309
 746           0.2654930

Changes in parameter estimates from starting values:
              Initial    Estimate  Difference
ASC_CAR         0.000      0.3535      0.3535
ASC_TRAIN       0.000     -0.4227     -0.4227
ASC_SM          0.000      0.0000      0.0000
B_COST          0.000     -4.1340     -4.1340
B_COST_S        1.000      4.6113      3.6113
B_TIME          0.000     -4.3257     -4.3257
B_TIME_S        1.000      4.5373      3.5373

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                                         
modelName              "Swissmetro"                                                                  
modelDescr             "Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space"
indivID                "ID"                                                                          
nCores                 "4"                                                                           
outputDirectory        "output/"                                                                     
mixing                 "TRUE"                                                                        
debug                  "FALSE"                                                                       
workInLogs             "FALSE"                                                                       
seed                   "13"                                                                          
HB                     "FALSE"                                                                       
noValidation           "FALSE"                                                                       
noDiagnostics          "FALSE"                                                                       
calculateLLC           "TRUE"                                                                        
panelData              "TRUE"                                                                        
analyticGrad           "TRUE"                                                                        
analyticGrad_manualSet "FALSE"                                                                       
overridePanel          "FALSE"                                                                       
preventOverridePanel   "FALSE"                                                                       
noModification         "FALSE"                                                                       

Hessian routines attempted
--------------------------
numerical jacobian of LL analytical gradient

Scaling in estimation
---------------------
              Value
ASC_CAR   0.3534593
ASC_TRAIN 0.4226654
B_COST    4.1339585
B_COST_S  4.6112515
B_TIME    4.3256742
B_TIME_S  4.5373043

Scaling used in computing Hessian
---------------------------------
              Value
ASC_CAR   0.3534593
ASC_TRAIN 0.4226654
B_COST    4.1339587
B_COST_S  4.6112513
B_TIME    4.3256742
B_TIME_S  4.5373055


apollo_randCoeff
------------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()

  randcoeff[["B_TIME_RND"]] = B_TIME + B_TIME_S * draws_t
  randcoeff[["B_COST_RND"]] = B_COST + B_COST_S * draws_c

  return(randcoeff)
}
<bytecode: 0x0000021416e0c560>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){

  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()

  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["alt1"]] = ASC_TRAIN + B_TIME_RND * TRAIN_TT_SCALED + B_COST_RND * TRAIN_COST_SCALED 
  V[["alt2"]] = ASC_SM + B_TIME_RND * SM_TT_SCALED + B_COST_RND * SM_COST_SCALED
  V[["alt3"]] = ASC_CAR + B_TIME_RND * CAR_TT_SCALED + B_COST_RND * CAR_CO_SCALED


  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = list(alt1=TRAIN_AV_SP, alt2=SM_AV, alt3=CAR_AV_SP),
    choiceVar     = CHOICE,
    utilities     = V
  )

  ### Compute probabilities using MNL model
  P[["model"]] = apollo_mnl(mnl_settings, functionality)
  
    ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)

  ### Average across inter-individual draws
  P = apollo_avgInterDraws(P, apollo_inputs, functionality)


  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
