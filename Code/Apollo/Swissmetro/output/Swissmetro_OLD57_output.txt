Model run by alexi using Apollo 0.3.2 on R 4.2.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : Swissmetro
Model description                           : Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space
Model run at                                : 2024-05-13 13:53:41
Estimation method                           : bfgs
Model diagnosis                             : successful convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -7.898934
     reciprocal of condition number         : 0.0182098
Number of individuals                       : 752
Number of rows in database                  : 6768
Number of modelled outcomes                 : 6768

Number of cores used                        :  4 
Number of inter-individual draws            : 100 (halton)

LL(start)                                   : -5529.1
LL at equal shares, LL(0)                   : -6964.66
LL at observed shares, LL(C)                : -5865
LL(final)                                   : -3923.96
Rho-squared vs equal shares                  :  0.4366 
Adj.Rho-squared vs equal shares              :  0.4357 
Rho-squared vs observed shares               :  0.331 
Adj.Rho-squared vs observed shares           :  0.3303 
AIC                                         :  7859.92 
BIC                                         :  7900.84 

Estimated parameters                        : 6
Time taken (hh:mm:ss)                       :  00:00:42.35 
     pre-estimation                         :  00:00:15.72 
     estimation                             :  00:00:15.78 
          initial estimation                :  00:00:14.27 
          estimation after rescaling        :  00:00:1.51 
     post-estimation                        :  00:00:10.85 
Iterations                                  :  32  
     initial estimation                     :  31 
     estimation after rescaling             :  1 

Unconstrained optimisation.

Estimates:
             Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
ASC_CAR        0.3322     0.07410       4.483      0.1384         2.399
ASC_TRAIN     -0.4454     0.08826      -5.046      0.1427        -3.121
ASC_SM         0.0000          NA          NA          NA            NA
B_COST        -4.0162     0.22043     -18.219      0.2376       -16.901
B_COST_S       4.8451     0.25990      18.642      0.2740        17.683
B_TIME        -4.3478     0.18456     -23.558      0.2204       -19.730
B_TIME_S       4.5274     0.18902      23.952      0.2283        19.832


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  6768.00 6768.00 5607.00
Times chosen                      908.00 4090.00 1770.00
Percentage chosen overall          13.42   60.43   26.15
Percentage chosen when available   13.42   60.43   31.57



Classical covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.005491    0.003481  2.6942e-04    0.001159   -0.004177
ASC_TRAIN    0.003481    0.007790  9.9280e-04   9.351e-05   -0.003627
B_COST     2.6942e-04  9.9280e-04     0.04859   -0.044414    0.016886
B_COST_S     0.001159   9.351e-05    -0.04441    0.067549   -0.018661
B_TIME      -0.004177   -0.003627     0.01689   -0.018661    0.034061
B_TIME_S     0.003705    0.002732    -0.01747    0.020540   -0.032443
             B_TIME_S
ASC_CAR      0.003705
ASC_TRAIN    0.002732
B_COST      -0.017472
B_COST_S     0.020540
B_TIME      -0.032443
B_TIME_S     0.035730

Robust covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.019168    0.010217    0.002011    0.002936    -0.01229
ASC_TRAIN    0.010217    0.020359   -0.001271    0.006251    -0.01206
B_COST       0.002011   -0.001271    0.056467   -0.058644     0.03009
B_COST_S     0.002936    0.006251   -0.058644    0.075073    -0.03469
B_TIME      -0.012289   -0.012063    0.030090   -0.034689     0.04856
B_TIME_S     0.011353    0.011570   -0.032062    0.037629    -0.04973
             B_TIME_S
ASC_CAR       0.01135
ASC_TRAIN     0.01157
B_COST       -0.03206
B_COST_S      0.03763
B_TIME       -0.04973
B_TIME_S      0.05211

Classical correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000    0.532194     0.01649    0.060205     -0.3054
ASC_TRAIN     0.53219    1.000000     0.05103    0.004076     -0.2226
B_COST        0.01649    0.051027     1.00000   -0.775229      0.4151
B_COST_S      0.06020    0.004076    -0.77523    1.000000     -0.3890
B_TIME       -0.30544   -0.222631     0.41508   -0.389034      1.0000
B_TIME_S      0.26450    0.163723    -0.41933    0.418090     -0.9300
             B_TIME_S
ASC_CAR        0.2645
ASC_TRAIN      0.1637
B_COST        -0.4193
B_COST_S       0.4181
B_TIME        -0.9300
B_TIME_S       1.0000

Robust correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000     0.51721     0.06112     0.07740     -0.4028
ASC_TRAIN     0.51721     1.00000    -0.03748     0.15989     -0.3836
B_COST        0.06112    -0.03748     1.00000    -0.90071      0.5746
B_COST_S      0.07740     0.15989    -0.90071     1.00000     -0.5745
B_TIME       -0.40280    -0.38364     0.57464    -0.57454      1.0000
B_TIME_S      0.35920     0.35522    -0.59105     0.60160     -0.9886
             B_TIME_S
ASC_CAR        0.3592
ASC_TRAIN      0.3552
B_COST        -0.5910
B_COST_S       0.6016
B_TIME        -0.9886
B_TIME_S       1.0000

 20 worst outliers in terms of lowest average per choice prediction:
  ID Avg prob per choice
 394           0.1748448
 362           0.1884305
  19           0.1958321
  58           0.2067346
  23           0.2070923
 283           0.2088759
 389           0.2095343
 783           0.2134403
  63           0.2243526
 352           0.2283447
 843           0.2402696
 351           0.2428723
 321           0.2478771
 681           0.2484468
 341           0.2484719
 360           0.2532342
 101           0.2572952
  87           0.2577952
 739           0.2594657
 746           0.2599363

Changes in parameter estimates from starting values:
              Initial    Estimate  Difference
ASC_CAR         0.000      0.3322      0.3322
ASC_TRAIN       0.000     -0.4454     -0.4454
ASC_SM          0.000      0.0000      0.0000
B_COST          0.000     -4.0162     -4.0162
B_COST_S        1.000      4.8451      3.8451
B_TIME          0.000     -4.3478     -4.3478
B_TIME_S        1.000      4.5274      3.5274

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                                         
modelName              "Swissmetro"                                                                  
modelDescr             "Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space"
indivID                "ID"                                                                          
nCores                 "4"                                                                           
outputDirectory        "output/"                                                                     
mixing                 "TRUE"                                                                        
debug                  "FALSE"                                                                       
workInLogs             "FALSE"                                                                       
seed                   "13"                                                                          
HB                     "FALSE"                                                                       
noValidation           "FALSE"                                                                       
noDiagnostics          "FALSE"                                                                       
calculateLLC           "TRUE"                                                                        
panelData              "TRUE"                                                                        
analyticGrad           "TRUE"                                                                        
analyticGrad_manualSet "FALSE"                                                                       
overridePanel          "FALSE"                                                                       
preventOverridePanel   "FALSE"                                                                       
noModification         "FALSE"                                                                       

Hessian routines attempted
--------------------------
numerical jacobian of LL analytical gradient

Scaling in estimation
---------------------
              Value
ASC_CAR   0.3321922
ASC_TRAIN 0.4453654
B_COST    4.0161708
B_COST_S  4.8451148
B_TIME    4.3477495
B_TIME_S  4.5274115

Scaling used in computing Hessian
---------------------------------
              Value
ASC_CAR   0.3321922
ASC_TRAIN 0.4453654
B_COST    4.0161683
B_COST_S  4.8451167
B_TIME    4.3477531
B_TIME_S  4.5274103


apollo_randCoeff
------------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()


  randcoeff[["B_COST_RND"]] = B_COST + B_COST_S * draws_c
  randcoeff[["B_TIME_RND"]] = B_TIME + B_TIME_S * draws_t

  return(randcoeff)
}
<bytecode: 0x00000195bf74d2b8>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){

  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()

  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["alt1"]] = ASC_TRAIN + B_TIME_RND * TRAIN_TT_SCALED + B_COST_RND * TRAIN_COST_SCALED 
  V[["alt2"]] = ASC_SM + B_TIME_RND * SM_TT_SCALED + B_COST_RND * SM_COST_SCALED 
  V[["alt3"]] = ASC_CAR + B_TIME_RND * CAR_TT_SCALED + B_COST_RND * CAR_CO_SCALED


  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = list(alt1=TRAIN_AV_SP, alt2=SM_AV, alt3=CAR_AV_SP),
    choiceVar     = CHOICE,
    utilities     = V
  )

  ### Compute probabilities using MNL model
  P[["model"]] = apollo_mnl(mnl_settings, functionality)
  
    ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)

  ### Average across inter-individual draws
  P = apollo_avgInterDraws(P, apollo_inputs, functionality)


  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
