Model run by alexi using Apollo 0.3.2 on R 4.2.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : Swissmetro
Model description                           : Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space
Model run at                                : 2024-05-13 10:22:37
Estimation method                           : bfgs
Model diagnosis                             : successful convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -6.554009
     reciprocal of condition number         : 0.0137322
Number of individuals                       : 752
Number of rows in database                  : 6768
Number of modelled outcomes                 : 6768

Number of cores used                        :  4 
Number of inter-individual draws            : 100 (halton)

LL(start)                                   : -4861.12
LL at equal shares, LL(0)                   : -6964.66
LL at observed shares, LL(C)                : -5865
LL(final)                                   : -3588.36
Rho-squared vs equal shares                  :  0.4848 
Adj.Rho-squared vs equal shares              :  0.4836 
Rho-squared vs observed shares               :  0.3882 
Adj.Rho-squared vs observed shares           :  0.3872 
AIC                                         :  7192.73 
BIC                                         :  7247.29 

Estimated parameters                        : 8
Time taken (hh:mm:ss)                       :  00:00:43.74 
     pre-estimation                         :  00:00:14.72 
     estimation                             :  00:00:14.23 
          initial estimation                :  00:00:13.09 
          estimation after rescaling        :  00:00:1.14 
     post-estimation                        :  00:00:14.79 
Iterations                                  :  37  
     initial estimation                     :  36 
     estimation after rescaling             :  1 

Unconstrained optimisation.

Estimates:
             Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
ASC_CAR        0.7047      0.1616       4.361      0.2388         2.951
ASC_TRAIN     -0.8633      0.2342      -3.686      0.2812        -3.070
ASC_SM         0.0000          NA          NA          NA            NA
B_COST        -4.3081      0.2321     -18.559      0.2521       -17.091
B_COST_S       3.1914      0.1923      16.595      0.1976        16.153
B_TIME        -5.4408      0.2740     -19.856      0.3686       -14.762
B_TIME_S       3.2545      0.1639      19.857      0.2128        15.291
SIGMA_V1       3.2110      0.2315      13.869      0.3254         9.867
SIGMA_V2       2.7357      0.1573      17.387      0.1883        14.532


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  6768.00 6768.00 5607.00
Times chosen                      908.00 4090.00 1770.00
Percentage chosen overall          13.42   60.43   26.15
Percentage chosen when available   13.42   60.43   31.57



Classical covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.026107    0.023044   2.344e-05    0.001739   -0.022622
ASC_TRAIN    0.023044    0.054836    0.001559    0.001245   -0.029026
B_COST      2.344e-05    0.001559    0.053885   -0.034218    0.027364
B_COST_S     0.001739    0.001245   -0.034218    0.036983   -0.018987
B_TIME      -0.022622   -0.029026    0.027364   -0.018987    0.075087
B_TIME_S     0.013063    0.015345   -0.016282    0.011253   -0.042314
SIGMA_V1     0.001659   -0.019612   -0.014242    0.009638   -0.009861
SIGMA_V2     0.002421   -0.001395   -0.013966    0.008246   -0.017815
             B_TIME_S    SIGMA_V1    SIGMA_V2
ASC_CAR      0.013063    0.001659    0.002421
ASC_TRAIN    0.015345   -0.019612   -0.001395
B_COST      -0.016282   -0.014242   -0.013966
B_COST_S     0.011253    0.009638    0.008246
B_TIME      -0.042314   -0.009861   -0.017815
B_TIME_S     0.026861    0.009134    0.011208
SIGMA_V1     0.009134    0.053603    0.014411
SIGMA_V2     0.011208    0.014411    0.024756

Robust covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.057022    0.046460    0.004095   -0.001516   -0.052625
ASC_TRAIN    0.046460    0.079085    0.001691    0.001115   -0.059711
B_COST       0.004095    0.001691    0.063541   -0.035317    0.036870
B_COST_S    -0.001516    0.001115   -0.035317    0.039034   -0.015735
B_TIME      -0.052625   -0.059711    0.036870   -0.015735    0.135849
B_TIME_S     0.032363    0.034052   -0.020753    0.009537   -0.076210
SIGMA_V1     0.008319   -0.019822   -0.009633    0.009777    0.003394
SIGMA_V2     0.006263   -0.009527   -0.009423    0.005679   -0.015712
             B_TIME_S    SIGMA_V1    SIGMA_V2
ASC_CAR      0.032363    0.008319    0.006263
ASC_TRAIN    0.034052   -0.019822   -0.009527
B_COST      -0.020753   -0.009633   -0.009423
B_COST_S     0.009537    0.009777    0.005679
B_TIME      -0.076210    0.003394   -0.015712
B_TIME_S     0.045300    0.009047    0.012020
SIGMA_V1     0.009047    0.105912    0.030353
SIGMA_V2     0.012020    0.030353    0.035440

Classical correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000     0.60905  6.2499e-04     0.05597     -0.5109
ASC_TRAIN     0.60905     1.00000     0.02868     0.02764     -0.4523
B_COST     6.2499e-04     0.02868     1.00000    -0.76652      0.4302
B_COST_S      0.05597     0.02764    -0.76652     1.00000     -0.3603
B_TIME       -0.51093    -0.45235     0.43020    -0.36031      1.0000
B_TIME_S      0.49328     0.39984    -0.42797     0.35704     -0.9422
SIGMA_V1      0.04434    -0.36174    -0.26500     0.21647     -0.1554
SIGMA_V2      0.09522    -0.03787    -0.38239     0.27252     -0.4132
             B_TIME_S    SIGMA_V1    SIGMA_V2
ASC_CAR        0.4933     0.04434     0.09522
ASC_TRAIN      0.3998    -0.36174    -0.03787
B_COST        -0.4280    -0.26500    -0.38239
B_COST_S       0.3570     0.21647     0.27252
B_TIME        -0.9422    -0.15543    -0.41319
B_TIME_S       1.0000     0.24071     0.43463
SIGMA_V1       0.2407     1.00000     0.39561
SIGMA_V2       0.4346     0.39561     1.00000

Robust correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000     0.69184     0.06802    -0.03214    -0.59792
ASC_TRAIN     0.69184     1.00000     0.02386     0.02006    -0.57608
B_COST        0.06802     0.02386     1.00000    -0.70916     0.39685
B_COST_S     -0.03214     0.02006    -0.70916     1.00000    -0.21608
B_TIME       -0.59792    -0.57608     0.39685    -0.21608     1.00000
B_TIME_S      0.63676     0.56891    -0.38682     0.22681    -0.97148
SIGMA_V1      0.10705    -0.21659    -0.11743     0.15206     0.02830
SIGMA_V2      0.13931    -0.17996    -0.19857     0.15270    -0.22645
             B_TIME_S    SIGMA_V1    SIGMA_V2
ASC_CAR        0.6368     0.10705      0.1393
ASC_TRAIN      0.5689    -0.21659     -0.1800
B_COST        -0.3868    -0.11743     -0.1986
B_COST_S       0.2268     0.15206      0.1527
B_TIME        -0.9715     0.02830     -0.2264
B_TIME_S       1.0000     0.13062      0.3000
SIGMA_V1       0.1306     1.00000      0.4954
SIGMA_V2       0.3000     0.49544      1.0000

 20 worst outliers in terms of lowest average per choice prediction:
  ID Avg prob per choice
 389           0.1633334
 321           0.1862473
  19           0.2092756
 681           0.2093967
 394           0.2156610
 238           0.2297669
 362           0.2417058
 733           0.2454097
 283           0.2520236
 328           0.2596938
 783           0.2620049
  58           0.2672859
 274           0.2695716
 807           0.2729957
 796           0.2748518
 586           0.2768780
 360           0.2794773
 634           0.2797257
 282           0.2821136
 887           0.2858019

Changes in parameter estimates from starting values:
              Initial    Estimate  Difference
ASC_CAR         0.000      0.7047      0.7047
ASC_TRAIN       0.000     -0.8633     -0.8633
ASC_SM          0.000      0.0000      0.0000
B_COST          0.000     -4.3081     -4.3081
B_COST_S        1.000      3.1914      2.1914
B_TIME          0.000     -5.4408     -5.4408
B_TIME_S        1.000      3.2545      2.2545
SIGMA_V1        1.000      3.2110      2.2110
SIGMA_V2        1.000      2.7357      1.7357

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                                         
modelName              "Swissmetro"                                                                  
modelDescr             "Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space"
indivID                "ID"                                                                          
nCores                 "4"                                                                           
outputDirectory        "output/"                                                                     
mixing                 "TRUE"                                                                        
debug                  "FALSE"                                                                       
workInLogs             "FALSE"                                                                       
seed                   "13"                                                                          
HB                     "FALSE"                                                                       
noValidation           "FALSE"                                                                       
noDiagnostics          "FALSE"                                                                       
calculateLLC           "TRUE"                                                                        
panelData              "TRUE"                                                                        
analyticGrad           "TRUE"                                                                        
analyticGrad_manualSet "FALSE"                                                                       
overridePanel          "FALSE"                                                                       
preventOverridePanel   "FALSE"                                                                       
noModification         "FALSE"                                                                       

Hessian routines attempted
--------------------------
numerical jacobian of LL analytical gradient

Scaling in estimation
---------------------
              Value
ASC_CAR   0.7046877
ASC_TRAIN 0.8632533
B_COST    4.3080683
B_COST_S  3.1913970
B_TIME    5.4408150
B_TIME_S  3.2545132
SIGMA_V1  3.2110437
SIGMA_V2  2.7357290

Scaling used in computing Hessian
---------------------------------
              Value
ASC_CAR   0.7046877
ASC_TRAIN 0.8632532
B_COST    4.3080638
B_COST_S  3.1913985
B_TIME    5.4408188
B_TIME_S  3.2545082
SIGMA_V1  3.2110452
SIGMA_V2  2.7357292


apollo_randCoeff
------------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()

  randcoeff[["B_TIME_RND"]] = B_TIME + B_TIME_S * draws_t
  randcoeff[["B_COST_RND"]] = B_COST + B_COST_S * draws_c
  randcoeff[["SIGMA_V1_RND"]] = SIGMA_V1 * draws_1
  randcoeff[["SIGMA_V2_RND"]] = SIGMA_V2 * draws_2

  return(randcoeff)
}
<bytecode: 0x0000023b5bf0f470>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){

  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()

  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["alt1"]] = ASC_TRAIN + B_TIME_RND * TRAIN_TT_SCALED + B_COST_RND * TRAIN_COST_SCALED + SIGMA_V1_RND
  V[["alt2"]] = ASC_SM + B_TIME_RND * SM_TT_SCALED + B_COST_RND * SM_COST_SCALED + SIGMA_V2_RND
  V[["alt3"]] = ASC_CAR + B_TIME_RND * CAR_TT_SCALED + B_COST_RND * CAR_CO_SCALED


  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = list(alt1=TRAIN_AV_SP, alt2=SM_AV, alt3=CAR_AV_SP),
    choiceVar     = CHOICE,
    utilities     = V
  )

  ### Compute probabilities using MNL model
  P[["model"]] = apollo_mnl(mnl_settings, functionality)
  
    ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)

  ### Average across inter-individual draws
  P = apollo_avgInterDraws(P, apollo_inputs, functionality)


  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
