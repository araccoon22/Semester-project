Model run by alexi using Apollo 0.3.2 on R 4.2.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : Swissmetro
Model description                           : Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space
Model run at                                : 2024-05-25 09:06:05
Estimation method                           : bfgs
Model diagnosis                             : successful convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -4.744666
     reciprocal of condition number         : 0.0191429
Number of individuals                       : 752
Number of rows in database                  : 6768
Number of modelled outcomes                 : 6768

Number of cores used                        :  4 
Number of inter-individual draws            : 6000 (halton)

LL(start)                                   : -4846.22
LL at equal shares, LL(0)                   : -6964.66
LL at observed shares, LL(C)                : -5865
LL(final)                                   : -3571.19
Rho-squared vs equal shares                  :  0.4872 
Adj.Rho-squared vs equal shares              :  0.4861 
Rho-squared vs observed shares               :  0.3911 
Adj.Rho-squared vs observed shares           :  0.3901 
AIC                                         :  7158.39 
BIC                                         :  7212.95 

Estimated parameters                        : 8
Time taken (hh:mm:ss)                       :  00:43:57.1 
     pre-estimation                         :  00:07:12.89 
     estimation                             :  00:19:46.28 
          initial estimation                :  00:18:32.69 
          estimation after rescaling        :  00:01:13.59 
     post-estimation                        :  00:16:57.93 
Iterations                                  :  47  
     initial estimation                     :  46 
     estimation after rescaling             :  1 

Unconstrained optimisation.

Estimates:
             Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
ASC_CAR        0.7128      0.1713       4.162      0.2049         3.478
ASC_TRAIN     -0.9934      0.2965      -3.350      0.2883        -3.446
ASC_SM         0.0000          NA          NA          NA            NA
B_COST        -4.7618      0.3048     -15.621      0.3266       -14.580
B_COST_S       3.2311      0.2946      10.967      0.3219        10.037
B_TIME        -5.8823      0.3021     -19.471      0.3585       -16.408
B_TIME_S       3.0139      0.1760      17.129      0.1994        15.118
SIGMA_1        3.3224      0.2958      11.232      0.3298        10.075
SIGMA_2        2.8753      0.1911      15.049      0.1984        14.491


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  6768.00 6768.00 5607.00
Times chosen                      908.00 4090.00 1770.00
Percentage chosen overall          13.42   60.43   26.15
Percentage chosen when available   13.42   60.43   31.57



Classical covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.029333    0.028367 -2.0646e-04  5.0506e-04   -0.020807
ASC_TRAIN    0.028367    0.087931   -0.002541    0.005341   -0.029581
B_COST    -2.0646e-04   -0.002541    0.092925   -0.056046    0.041970
B_COST_S   5.0506e-04    0.005341   -0.056046    0.086795   -0.031107
B_TIME      -0.020807   -0.029581    0.041970   -0.031107    0.091271
B_TIME_S     0.011278    0.019228   -0.021635    0.014835   -0.048154
SIGMA_1     -0.003447   -0.041011   -0.005347   -0.011073   -0.006695
SIGMA_2      0.004436    0.004758   -0.022949    0.013023   -0.026934
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR      0.011278   -0.003447    0.004436
ASC_TRAIN    0.019228   -0.041011    0.004758
B_COST      -0.021635   -0.005347   -0.022949
B_COST_S     0.014835   -0.011073    0.013023
B_TIME      -0.048154   -0.006695   -0.026934
B_TIME_S     0.030961    0.001771    0.013452
SIGMA_1      0.001771    0.087490    0.002016
SIGMA_2      0.013452    0.002016    0.036502

Robust covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.041994    0.029782    0.002971    0.004092   -0.039379
ASC_TRAIN    0.029782    0.083114   -0.006856    0.014486   -0.038424
B_COST       0.002971   -0.006856    0.106666   -0.076562    0.054523
B_COST_S     0.004092    0.014486   -0.076562    0.103631   -0.048694
B_TIME      -0.039379   -0.038424    0.054523   -0.048694    0.128519
B_TIME_S     0.021385    0.024893   -0.027863    0.023133   -0.068151
SIGMA_1     -0.003179   -0.040868    0.007355   -0.042664    0.001584
SIGMA_2      0.009087  3.8487e-04   -0.025485    0.021095   -0.040168
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR       0.02138   -0.003179    0.009087
ASC_TRAIN     0.02489   -0.040868  3.8487e-04
B_COST       -0.02786    0.007355   -0.025485
B_COST_S      0.02313   -0.042664    0.021095
B_TIME       -0.06815    0.001584   -0.040168
B_TIME_S      0.03974  5.0472e-04    0.019799
SIGMA_1    5.0472e-04    0.108738    0.005482
SIGMA_2       0.01980    0.005482    0.039368

Classical correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      1.000000     0.55855   -0.003955     0.01001    -0.40213
ASC_TRAIN    0.558554     1.00000   -0.028108     0.06113    -0.33020
B_COST      -0.003955    -0.02811    1.000000    -0.62407     0.45573
B_COST_S     0.010010     0.06113   -0.624069     1.00000    -0.34950
B_TIME      -0.402126    -0.33020    0.455725    -0.34950     1.00000
B_TIME_S     0.374243     0.36852   -0.403342     0.28617    -0.90585
SIGMA_1     -0.068053    -0.46757   -0.059304    -0.12707    -0.07492
SIGMA_2      0.135554     0.08399   -0.394037     0.23137    -0.46663
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR       0.37424    -0.06805     0.13555
ASC_TRAIN     0.36852    -0.46757     0.08399
B_COST       -0.40334    -0.05930    -0.39404
B_COST_S      0.28617    -0.12707     0.23137
B_TIME       -0.90585    -0.07492    -0.46663
B_TIME_S      1.00000     0.03403     0.40015
SIGMA_1       0.03403     1.00000     0.03567
SIGMA_2       0.40015     0.03567     1.00000

Robust correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000    0.504104     0.04438     0.06203    -0.53602
ASC_TRAIN     0.50410    1.000000    -0.07282     0.15608    -0.37178
B_COST        0.04438   -0.072815     1.00000    -0.72820     0.46567
B_COST_S      0.06203    0.156082    -0.72820     1.00000    -0.42194
B_TIME       -0.53602   -0.371776     0.46567    -0.42194     1.00000
B_TIME_S      0.52345    0.433113    -0.42794     0.36046    -0.95358
SIGMA_1      -0.04704   -0.429882     0.06830    -0.40190     0.01340
SIGMA_2       0.22350    0.006728    -0.39328     0.33026    -0.56471
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR      0.523449   -0.047038    0.223496
ASC_TRAIN    0.433113   -0.429882    0.006728
B_COST      -0.427937    0.068296   -0.393281
B_COST_S     0.360464   -0.401904    0.330259
B_TIME      -0.953582    0.013399   -0.564708
B_TIME_S     1.000000    0.007678    0.500544
SIGMA_1      0.007678    1.000000    0.083787
SIGMA_2      0.500544    0.083787    1.000000

 20 worst outliers in terms of lowest average per choice prediction:
  ID Avg prob per choice
  19           0.1503563
 389           0.1789064
 321           0.1937559
 394           0.2020778
 362           0.2109248
 238           0.2134944
 681           0.2219596
 733           0.2514886
 283           0.2527670
 328           0.2588225
  63           0.2668340
  58           0.2683331
  56           0.2684519
 807           0.2690321
 274           0.2734273
 454           0.2745743
 282           0.2762503
 783           0.2763907
 586           0.2767046
 634           0.2774957

Changes in parameter estimates from starting values:
              Initial    Estimate  Difference
ASC_CAR         0.000      0.7128      0.7128
ASC_TRAIN       0.000     -0.9934     -0.9934
ASC_SM          0.000      0.0000      0.0000
B_COST          0.000     -4.7618     -4.7618
B_COST_S        1.000      3.2311      2.2311
B_TIME          0.000     -5.8823     -5.8823
B_TIME_S        1.000      3.0139      2.0139
SIGMA_1         1.000      3.3224      2.3224
SIGMA_2         1.000      2.8753      1.8753

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                                         
modelName              "Swissmetro"                                                                  
modelDescr             "Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space"
indivID                "ID"                                                                          
nCores                 "4"                                                                           
outputDirectory        "output/"                                                                     
mixing                 "TRUE"                                                                        
debug                  "FALSE"                                                                       
workInLogs             "FALSE"                                                                       
seed                   "13"                                                                          
HB                     "FALSE"                                                                       
noValidation           "FALSE"                                                                       
noDiagnostics          "FALSE"                                                                       
calculateLLC           "TRUE"                                                                        
panelData              "TRUE"                                                                        
analyticGrad           "TRUE"                                                                        
analyticGrad_manualSet "FALSE"                                                                       
overridePanel          "FALSE"                                                                       
preventOverridePanel   "FALSE"                                                                       
noModification         "FALSE"                                                                       

Hessian routines attempted
--------------------------
numerical jacobian of LL analytical gradient

Scaling in estimation
---------------------
              Value
ASC_CAR   0.7127920
ASC_TRAIN 0.9934308
B_COST    4.7618467
B_COST_S  3.2310627
B_TIME    5.8823258
B_TIME_S  3.0138825
SIGMA_1   3.3223807
SIGMA_2   2.8752744

Scaling used in computing Hessian
---------------------------------
              Value
ASC_CAR   0.7127919
ASC_TRAIN 0.9934308
B_COST    4.7618480
B_COST_S  3.2310616
B_TIME    5.8823239
B_TIME_S  3.0138848
SIGMA_1   3.3223801
SIGMA_2   2.8752728


apollo_randCoeff
------------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()


  randcoeff[["B_COST_RND"]] = B_COST + B_COST_S * draws_c
  randcoeff[["B_TIME_RND"]] = B_TIME + B_TIME_S * draws_t
  randcoeff[["SIGMA_CAR_RND"]] = SIGMA_1 * draws_1
  randcoeff[["SIGMA_SM_RND"]] = SIGMA_2 * draws_2

  return(randcoeff)
}
<bytecode: 0x000002003ebb8e18>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){

  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()

  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["alt1"]] = ASC_TRAIN + B_TIME_RND * TRAIN_TT_SCALED + B_COST_RND * TRAIN_COST_SCALED + SIGMA_CAR_RND
  V[["alt2"]] = ASC_SM + B_TIME_RND * SM_TT_SCALED + B_COST_RND * SM_COST_SCALED + SIGMA_SM_RND
  V[["alt3"]] = ASC_CAR + B_TIME_RND * CAR_TT_SCALED + B_COST_RND * CAR_CO_SCALED


  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = list(alt1=TRAIN_AV_SP, alt2=SM_AV, alt3=CAR_AV_SP),
    choiceVar     = CHOICE,
    utilities     = V
  )

  ### Compute probabilities using MNL model
  P[["model"]] = apollo_mnl(mnl_settings, functionality)
  
    ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)

  ### Average across inter-individual draws
  P = apollo_avgInterDraws(P, apollo_inputs, functionality)


  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
