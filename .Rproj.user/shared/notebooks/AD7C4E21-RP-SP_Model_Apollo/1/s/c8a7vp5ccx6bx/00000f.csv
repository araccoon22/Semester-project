"0","apollo_inputs = apollo_validateInputs()"
"1","
outputDirectory provided by user does not exist, so will be created.
"
"1","Several observations per individual detected based on the value of ID.
"
"1","  Setting panelData in apollo_control set to TRUE.
"
"1","All checks on apollo_control completed.
"
"1","All checks on database completed.
"
"0","# ################################################################# #"
"0","#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####"
"0","# ################################################################# #"
"0",""
"0","apollo_probabilities=function(apollo_beta, apollo_inputs, functionality=""estimate""){"
"0",""
"0","  ### Attach inputs and detach after function exit"
"0","  apollo_attach(apollo_beta, apollo_inputs)"
"0","  on.exit(apollo_detach(apollo_beta, apollo_inputs))"
"0",""
"0","  ### Create list of probabilities P"
"0","  P = list()"
"0",""
"0","  ### Create alternative specific constants and coefficients using interactions with socio-demographics"
"0","  asc_bus_value   = asc_bus  + asc_bus_shift_female * female"
"0","  asc_air_value   = asc_air  + asc_air_shift_female * female"
"0","  asc_rail_value  = asc_rail + asc_rail_shift_female * female"
"0","  b_tt_car_value  = b_tt_car + b_tt_shift_business * business"
"0","  b_tt_bus_value  = b_tt_bus + b_tt_shift_business * business"
"0","  b_tt_air_value  = b_tt_air + b_tt_shift_business * business"
"0","  b_tt_rail_value = b_tt_rail + b_tt_shift_business * business"
"0","  b_cost_value    = ( b_cost +  b_cost_shift_business * business ) * ( income / mean_income ) ^ cost_income_elast"
"0",""
"0","  ### List of utilities (before applying scales): these must use the same names as in mnl_settings, order is irrelevant"
"0","  V = list()"
"0","  V[[""car""]]  = asc_car        + b_tt_car_value  * time_car                           + b_cost_value * cost_car"
"0","  V[[""bus""]]  = asc_bus_value  + b_tt_bus_value  * time_bus  + b_access * access_bus  + b_cost_value * cost_bus "
"0","  V[[""air""]]  = asc_air_value  + b_tt_air_value  * time_air  + b_access * access_air  + b_cost_value * cost_air   + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )"
"0","  V[[""rail""]] = asc_rail_value + b_tt_rail_value * time_rail + b_access * access_rail + b_cost_value * cost_rail  + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )"
"0",""
"0","  ### Compute probabilities for the RP part of the data using MNL model"
"0","  mnl_settings_RP = list("
"0","       alternatives  = c(car=1, bus=2, air=3, rail=4), "
"0","       avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail), "
"0","       choiceVar     = choice, "
"0","       utilities     = list(car  = mu_RP*V[[""car""]],"
"0","                            bus  = mu_RP*V[[""bus""]],"
"0","                            air  = mu_RP*V[[""air""]],"
"0","                            rail = mu_RP*V[[""rail""]]),"
"0","       rows          = (RP==1)"
"0","  )"
"0","  "
"0","  P[[""RP""]] = apollo_mnl(mnl_settings_RP, functionality)"
"0",""
"0","  ### Compute probabilities for the SP part of the data using MNL model"
"0","  mnl_settings_SP = list("
"0","       alternatives  = c(car=1, bus=2, air=3, rail=4), "
"0","       avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail), "
"0","       choiceVar     = choice, "
"0","       utilities     = list(car  = mu_SP*V[[""car""]],"
"0","                            bus  = mu_SP*V[[""bus""]],"
"0","                            air  = mu_SP*V[[""air""]],"
"0","                            rail = mu_SP*V[[""rail""]]),"
"0","       rows          = (SP==1)"
"0","  )"
"0","  "
"0","  P[[""SP""]] = apollo_mnl(mnl_settings_SP, functionality)"
"0",""
"0","  ### Combined model"
"0","  P = apollo_combineModels(P, apollo_inputs, functionality)"
"0","  "
"0","  ### Take product across observation for same individual"
"0","  P = apollo_panelProd(P, apollo_inputs, functionality)"
"0",""
"0","  ### Prepare and return outputs of function"
"0","  P = apollo_prepareProb(P, apollo_inputs, functionality)"
"0","  return(P)"
"0","}"
"0",""
