"0",""
"0",""
"0","apollo_inputs = apollo_validateInputs()"
"1","Several observations per individual detected based on the value of ID.
"
"1","  Setting panelData in apollo_control set to TRUE.
"
"1","All checks on apollo_control completed.
"
"1","All checks on database completed.
"
"0","apollo_probabilities=function(apollo_beta, apollo_inputs, functionality=""estimate""){"
"0","    "
"0","  ### Attach inputs and detach after function exit"
"0","  apollo_attach(apollo_beta, apollo_inputs)"
"0","  on.exit(apollo_detach(apollo_beta, apollo_inputs))"
"0",""
"0","  ### Create list of probabilities P"
"0","  P = list()"
"0","  "
"0","  ### Effects coding constraint"
"0","  b_no_frills = - b_wifi - b_food"
"0","  "
"0","  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant"
"0","  V = list()"
"0","  V[[""car""]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car"
"0","  V[[""bus""]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus "
"0","  V[[""air""]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air    + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )"
"0","  V[[""rail""]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail   + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )"
"0","  "
"0","  ### Define settings for MNL model component"
"0","  mnl_settings = list("
"0","    alternatives  = c(car=1, bus=2, air=3, rail=4), "
"0","    avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail), "
"0","    choiceVar     = choice,"
"0","    utilities     = V"
"0","  )"
"0","  "
"0","  ### Compute probabilities using MNL model"
"0","  P[[""model""]] = apollo_mnl(mnl_settings, functionality)"
"0","  "
"0","  ### Take product across observation for same individual"
"0","  P = apollo_panelProd(P, apollo_inputs, functionality)"
"0","  "
"0","  ### Prepare and return outputs of function"
"0","  P = apollo_prepareProb(P, apollo_inputs, functionality)"
"0","  return(P)"
"0","}"
"0",""
