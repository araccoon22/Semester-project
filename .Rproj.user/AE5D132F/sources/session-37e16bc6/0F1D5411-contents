---
title: "RP-SP Model in Apollo"
output: html_document
date: "2024-03-04"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
Our first resource is a synthetic dataset looking at mode choice for 500 travellers. For each individual, the data contains two revealed preference (RP) inter-city trips, where the possible modes were car, bus, air and rail, and where each individual has at least two of these four modes available to them. The journey options are described on the basis of access time (except for car), travel time and cost, with times in minutes, and costs in $. The data then also contains 14 stated preference (SP) tasks per person, using the same alternatives as those available on the RP journey for that person, but with an additional categorical quality of service attribute added in for air and rail, taking three levels, namely no frills, wifi available, or food available. For each individual, the dataset also contains information on gender, whether the journey was a business trip or not, and the individualâ€™s income.

### LOAD LIBRARY AND DEFINE CORE SETTINGS                      

```{r}

### Clear memory
rm(list = ls())

### Load Apollo library
library(apollo)

### Initialise code
apollo_initialise()

### Set core controls
apollo_control = list(
  modelName       = "MNL_RP_SP",
  modelDescr      = "RP-SP model on mode choice data",
  indivID         = "ID", 
  outputDirectory = "output"
)
```

### LOADING DATA 

```{r}
database = apollo_modeChoiceData

### Create new variable with average income
database$mean_income = mean(database$income)

```

### DEFINE PARAMETERS

```{r}

### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car                 = 0,
              asc_bus                 = 0,
              asc_air                 = 0,
              asc_rail                = 0,
              asc_bus_shift_female    = 0,
              asc_air_shift_female    = 0,
              asc_rail_shift_female   = 0,
              b_tt_car                = 0,
              b_tt_bus                = 0,
              b_tt_air                = 0,
              b_tt_rail               = 0,
              b_tt_shift_business     = 0,
              b_access                = 0,
              b_cost                  = 0,
              b_cost_shift_business   = 0,
              cost_income_elast       = 0,
              b_no_frills             = 0,
              b_wifi                  = 0,
              b_food                  = 0,
              mu_RP                   = 1,
              mu_SP                   = 1)

### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car","b_no_frills","mu_RP")

```

### GROUP AND VALIDATE INPUTS

```{r}
apollo_inputs = apollo_validateInputs()

# ################################################################# #
#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####
# ################################################################# #

apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){

  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()

  ### Create alternative specific constants and coefficients using interactions with socio-demographics
  asc_bus_value   = asc_bus  + asc_bus_shift_female * female
  asc_air_value   = asc_air  + asc_air_shift_female * female
  asc_rail_value  = asc_rail + asc_rail_shift_female * female
  b_tt_car_value  = b_tt_car + b_tt_shift_business * business
  b_tt_bus_value  = b_tt_bus + b_tt_shift_business * business
  b_tt_air_value  = b_tt_air + b_tt_shift_business * business
  b_tt_rail_value = b_tt_rail + b_tt_shift_business * business
  b_cost_value    = ( b_cost +  b_cost_shift_business * business ) * ( income / mean_income ) ^ cost_income_elast

  ### List of utilities (before applying scales): these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["car"]]  = asc_car        + b_tt_car_value  * time_car                           + b_cost_value * cost_car
  V[["bus"]]  = asc_bus_value  + b_tt_bus_value  * time_bus  + b_access * access_bus  + b_cost_value * cost_bus 
  V[["air"]]  = asc_air_value  + b_tt_air_value  * time_air  + b_access * access_air  + b_cost_value * cost_air   + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )
  V[["rail"]] = asc_rail_value + b_tt_rail_value * time_rail + b_access * access_rail + b_cost_value * cost_rail  + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )

  ### Compute probabilities for the RP part of the data using MNL model
  mnl_settings_RP = list(
       alternatives  = c(car=1, bus=2, air=3, rail=4), 
       avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail), 
       choiceVar     = choice, 
       utilities     = list(car  = mu_RP*V[["car"]],
                            bus  = mu_RP*V[["bus"]],
                            air  = mu_RP*V[["air"]],
                            rail = mu_RP*V[["rail"]]),
       rows          = (RP==1)
  )
  
  P[["RP"]] = apollo_mnl(mnl_settings_RP, functionality)

  ### Compute probabilities for the SP part of the data using MNL model
  mnl_settings_SP = list(
       alternatives  = c(car=1, bus=2, air=3, rail=4), 
       avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail), 
       choiceVar     = choice, 
       utilities     = list(car  = mu_SP*V[["car"]],
                            bus  = mu_SP*V[["bus"]],
                            air  = mu_SP*V[["air"]],
                            rail = mu_SP*V[["rail"]]),
       rows          = (SP==1)
  )
  
  P[["SP"]] = apollo_mnl(mnl_settings_SP, functionality)

  ### Combined model
  P = apollo_combineModels(P, apollo_inputs, functionality)
  
  ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)

  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}

```

### MODEL ESTIMATION + OUTPUTS

```{r}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)

#Formatted output (To screen)

apollo_modelOutput(model)

# Formatted output (To File, using model name)

apollo_saveOutput(model)

```

### POST-PROCESSING                                           

```{r}

### Print outputs of additional diagnostics to new output file (remember to close file writing when complete)
apollo_sink()
```



### MODEL PREDICTIONS AND ELASTICITY CALCULATIONS 

```{r}
### RP elasticities

### Use the estimated model to make predictions
predictions_base = apollo_prediction(model, 
                                     apollo_probabilities, 
                                     apollo_inputs,
                                     prediction_settings=list(modelComponent = "RP"))

### Look at a summary of the predicted choice probabilities
summary(predictions_base)

### Now imagine the cost for rail increases by 10%
database$cost_rail = 1.01*database$cost_rail

### Rerun predictions with the new data, and save into a separate matrix
apollo_inputs=apollo_validateInputs()
predictions_new = apollo_prediction(model, 
                                    apollo_probabilities, 
                                    apollo_inputs,
                                    prediction_settings=list(modelComponent = "RP"))

### Look at a summary of the predicted choice probabilities
summary(predictions_new)

### Return to original data
database$cost_rail = 1/1.01*database$cost_rail

### Compute own elasticity for rail:
log(sum(predictions_new[,6],na.rm=TRUE)/sum(predictions_base[,6],na.rm=TRUE))/log(1.01)

### SP elasticities

### Use the estimated model to make predictions
apollo_inputs=apollo_validateInputs()
predictions_base = apollo_prediction(model, 
                                     apollo_probabilities, 
                                     apollo_inputs,
                                     prediction_settings=list(modelComponent = "SP"))

### Look at a summary of the predicted choice probabilities
summary(predictions_base)

### Now imagine the cost for rail increases by 10%
database$cost_rail = 1.01*database$cost_rail

### Rerun predictions with the new data, and save into a separate matrix
apollo_inputs=apollo_validateInputs()
predictions_new = apollo_prediction(model, 
                                    apollo_probabilities, 
                                    apollo_inputs,
                                    prediction_settings=list(modelComponent = "SP"))

### Look at a summary of the predicted choice probabilities
summary(predictions_new)

### Return to original data
database$cost_rail = 1/1.01*database$cost_rail

### Compute own elasticity for rail:
log(sum(predictions_new[,6],na.rm=TRUE)/sum(predictions_base[,6],na.rm=TRUE))/log(1.01)

# ----------------------------------------------------------------- #
#---- switch off writing to file                                 ----
# ----------------------------------------------------------------- #

apollo_sink()
```

