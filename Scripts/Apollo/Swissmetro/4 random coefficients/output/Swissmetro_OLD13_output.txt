Model run by alexi using Apollo 0.3.2 on R 4.2.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : Swissmetro
Model description                           : Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space
Model run at                                : 2024-05-15 22:04:49
Estimation method                           : bfgs
Model diagnosis                             : successful convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -4.708299
     reciprocal of condition number         : 0.0115378
Number of individuals                       : 752
Number of rows in database                  : 6768
Number of modelled outcomes                 : 6768

Number of cores used                        :  4 
Number of inter-individual draws            : 2000 (halton)

LL(start)                                   : -4846.22
LL at equal shares, LL(0)                   : -6964.66
LL at observed shares, LL(C)                : -5865
LL(final)                                   : -3568.02
Rho-squared vs equal shares                  :  0.4877 
Adj.Rho-squared vs equal shares              :  0.4865 
Rho-squared vs observed shares               :  0.3916 
Adj.Rho-squared vs observed shares           :  0.3906 
AIC                                         :  7152.04 
BIC                                         :  7206.6 

Estimated parameters                        : 8
Time taken (hh:mm:ss)                       :  00:12:32.42 
     pre-estimation                         :  00:02:2.84 
     estimation                             :  00:07:10.5 
          initial estimation                :  00:04:58.03 
          estimation after rescaling        :  00:02:12.48 
     post-estimation                        :  00:03:19.08 
Iterations                                  :  68  
     initial estimation                     :  54 
     estimation after rescaling             :  14 

Unconstrained optimisation.

Estimates:
             Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
ASC_CAR        0.6935      0.1677       4.134      0.1992         3.481
ASC_TRAIN     -0.9937      0.2726      -3.646      0.2532        -3.925
ASC_SM         0.0000          NA          NA          NA            NA
B_COST        -4.7191      0.2972     -15.880      0.3083       -15.306
B_COST_S       3.6577      0.2977      12.286      0.2943        12.427
B_TIME        -5.9480      0.3078     -19.323      0.3608       -16.483
B_TIME_S       3.1231      0.1747      17.879      0.1940        16.098
SIGMA_1        3.2549      0.2779      11.712      0.2836        11.476
SIGMA_2        2.8875      0.1812      15.939      0.1831        15.766


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  6768.00 6768.00 5607.00
Times chosen                      908.00 4090.00 1770.00
Percentage chosen overall          13.42   60.43   26.15
Percentage chosen when available   13.42   60.43   31.57



Classical covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.028133    0.023792  4.1395e-04    0.002901   -0.019327
ASC_TRAIN    0.023792    0.074290  3.2923e-04    0.002963   -0.025594
B_COST     4.1395e-04  3.2923e-04     0.08831   -0.063692    0.040550
B_COST_S     0.002901    0.002963    -0.06369    0.088639   -0.034820
B_TIME      -0.019327   -0.025594     0.04055   -0.034820    0.094751
B_TIME_S     0.009250    0.014209    -0.02105    0.017695   -0.050252
SIGMA_1     -0.003260   -0.039831    -0.01001    0.015200   -0.009391
SIGMA_2      0.004534    0.001802    -0.02220    0.008222   -0.025263
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR      0.009250   -0.003260    0.004534
ASC_TRAIN    0.014209   -0.039831    0.001802
B_COST      -0.021052   -0.010005   -0.022196
B_COST_S     0.017695    0.015200    0.008222
B_TIME      -0.050252   -0.009391   -0.025263
B_TIME_S     0.030515 -5.3090e-04    0.012987
SIGMA_1   -5.3090e-04    0.077238    0.010583
SIGMA_2      0.012987    0.010583    0.032819

Robust covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.039676    0.022077    0.002566    0.003712    -0.03659
ASC_TRAIN    0.022077    0.064108   -0.003601    0.007656    -0.03192
B_COST       0.002566   -0.003601    0.095065   -0.073733     0.05091
B_COST_S     0.003712    0.007656   -0.073733    0.086629    -0.04206
B_TIME      -0.036594   -0.031922    0.050914   -0.042065     0.13021
B_TIME_S     0.018363    0.017296   -0.026285    0.020958    -0.06913
SIGMA_1   -2.7272e-04   -0.039063   -0.009109    0.017543    -0.01037
SIGMA_2      0.008595   -0.003831   -0.022998    0.008512    -0.03471
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR       0.01836 -2.7272e-04    0.008595
ASC_TRAIN     0.01730   -0.039063   -0.003831
B_COST       -0.02629   -0.009109   -0.022998
B_COST_S      0.02096    0.017543    0.008512
B_TIME       -0.06913   -0.010368   -0.034714
B_TIME_S      0.03764  7.4511e-04    0.017151
SIGMA_1    7.4511e-04    0.080437    0.022862
SIGMA_2       0.01715    0.022862    0.033541

Classical correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      1.000000    0.520429    0.008305     0.05809     -0.3744
ASC_TRAIN    0.520429    1.000000    0.004065     0.03651     -0.3051
B_COST       0.008305    0.004065    1.000000    -0.71988      0.4433
B_COST_S     0.058093    0.036507   -0.719876     1.00000     -0.3799
B_TIME      -0.374351   -0.305059    0.443285    -0.37995      1.0000
B_TIME_S     0.315698    0.298432   -0.405536     0.34023     -0.9346
SIGMA_1     -0.069943   -0.525825   -0.121145     0.18371     -0.1098
SIGMA_2      0.149222    0.036502   -0.412282     0.15244     -0.4530
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR       0.31570    -0.06994     0.14922
ASC_TRAIN     0.29843    -0.52583     0.03650
B_COST       -0.40554    -0.12115    -0.41228
B_COST_S      0.34023     0.18371     0.15244
B_TIME       -0.93455    -0.10977    -0.45303
B_TIME_S      1.00000    -0.01094     0.41039
SIGMA_1      -0.01094     1.00000     0.21019
SIGMA_2       0.41039     0.21019     1.00000

Robust correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      1.000000     0.43775     0.04178     0.06332     -0.5091
ASC_TRAIN    0.437747     1.00000    -0.04612     0.10273     -0.3494
B_COST       0.041782    -0.04612     1.00000    -0.81250      0.4576
B_COST_S     0.063316     0.10273    -0.81250     1.00000     -0.3961
B_TIME      -0.509119    -0.34939     0.45762    -0.39606      1.0000
B_TIME_S     0.475176     0.35210    -0.43942     0.36702     -0.9874
SIGMA_1     -0.004828    -0.54398    -0.10416     0.21016     -0.1013
SIGMA_2      0.235617    -0.08261    -0.40729     0.15791     -0.5253
             B_TIME_S     SIGMA_1     SIGMA_2
ASC_CAR       0.47518   -0.004828     0.23562
ASC_TRAIN     0.35210   -0.543983    -0.08261
B_COST       -0.43942   -0.104162    -0.40729
B_COST_S      0.36702    0.210157     0.15791
B_TIME       -0.98741   -0.101308    -0.52528
B_TIME_S      1.00000    0.013542     0.48269
SIGMA_1       0.01354    1.000000     0.44016
SIGMA_2       0.48269    0.440158     1.00000

 20 worst outliers in terms of lowest average per choice prediction:
  ID Avg prob per choice
  19           0.1540708
 389           0.1814380
 321           0.2014747
 238           0.2133785
 362           0.2151340
 681           0.2255341
 394           0.2413474
 283           0.2494428
 733           0.2510918
 328           0.2579841
  63           0.2646865
 807           0.2684838
  56           0.2728216
 274           0.2735517
 282           0.2751828
 586           0.2757486
 634           0.2762474
 937           0.2776048
  58           0.2779885
 783           0.2781439

Changes in parameter estimates from starting values:
              Initial    Estimate  Difference
ASC_CAR         0.000      0.6935      0.6935
ASC_TRAIN       0.000     -0.9937     -0.9937
ASC_SM          0.000      0.0000      0.0000
B_COST          0.000     -4.7191     -4.7191
B_COST_S        1.000      3.6577      2.6577
B_TIME          0.000     -5.9480     -5.9480
B_TIME_S        1.000      3.1231      2.1231
SIGMA_1         1.000      3.2549      2.2549
SIGMA_2         1.000      2.8875      1.8875

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                                         
modelName              "Swissmetro"                                                                  
modelDescr             "Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space"
indivID                "ID"                                                                          
nCores                 "4"                                                                           
outputDirectory        "output/"                                                                     
mixing                 "TRUE"                                                                        
debug                  "FALSE"                                                                       
workInLogs             "FALSE"                                                                       
seed                   "13"                                                                          
HB                     "FALSE"                                                                       
noValidation           "FALSE"                                                                       
noDiagnostics          "FALSE"                                                                       
calculateLLC           "TRUE"                                                                        
panelData              "TRUE"                                                                        
analyticGrad           "TRUE"                                                                        
analyticGrad_manualSet "FALSE"                                                                       
overridePanel          "FALSE"                                                                       
preventOverridePanel   "FALSE"                                                                       
noModification         "FALSE"                                                                       

Hessian routines attempted
--------------------------
numerical jacobian of LL analytical gradient

Scaling in estimation
---------------------
              Value
ASC_CAR   0.6502213
ASC_TRAIN 1.1470408
B_COST    4.8143704
B_COST_S  3.7527943
B_TIME    5.8075173
B_TIME_S  3.9672132
SIGMA_1   2.9834764
SIGMA_2   2.9935269

Scaling used in computing Hessian
---------------------------------
              Value
ASC_CAR   0.6934546
ASC_TRAIN 0.9937167
B_COST    4.7191353
B_COST_S  3.6577134
B_TIME    5.9479741
B_TIME_S  3.1231140
SIGMA_1   3.2548677
SIGMA_2   2.8874840


apollo_randCoeff
------------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()


  randcoeff[["B_COST_RND"]] = B_COST + B_COST_S * draws_c
  randcoeff[["B_TIME_RND"]] = B_TIME + B_TIME_S * draws_t
  randcoeff[["SIGMA_CAR_RND"]] = SIGMA_1 * draws_1
  randcoeff[["SIGMA_SM_RND"]] = SIGMA_2 * draws_2

  return(randcoeff)
}
<bytecode: 0x0000015974464d40>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){

  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()

  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["alt1"]] = ASC_TRAIN + B_TIME_RND * TRAIN_TT_SCALED + B_COST_RND * TRAIN_COST_SCALED + SIGMA_CAR_RND
  V[["alt2"]] = ASC_SM + B_TIME_RND * SM_TT_SCALED + B_COST_RND * SM_COST_SCALED + SIGMA_SM_RND
  V[["alt3"]] = ASC_CAR + B_TIME_RND * CAR_TT_SCALED + B_COST_RND * CAR_CO_SCALED


  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = list(alt1=TRAIN_AV_SP, alt2=SM_AV, alt3=CAR_AV_SP),
    choiceVar     = CHOICE,
    utilities     = V
  )

  ### Compute probabilities using MNL model
  P[["model"]] = apollo_mnl(mnl_settings, functionality)
  
    ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)

  ### Average across inter-individual draws
  P = apollo_avgInterDraws(P, apollo_inputs, functionality)


  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
