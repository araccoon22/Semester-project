Model run by alexi using Apollo 0.3.2 on R 4.2.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : Swissmetro
Model description                           : Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space
Model run at                                : 2024-05-10 13:58:47
Estimation method                           : bfgs
Model diagnosis                             : successful convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -15.45168
     reciprocal of condition number         : 0.0223292
Number of individuals                       : 752
Number of rows in database                  : 6768
Number of modelled outcomes                 : 6768

Number of cores used                        :  4 
Number of inter-individual draws            : 500 (halton)

LL(start)                                   : -5610.46
LL at equal shares, LL(0)                   : -6964.66
LL at observed shares, LL(C)                : -5865
LL(final)                                   : -4263.87
Rho-squared vs equal shares                  :  0.3878 
Adj.Rho-squared vs equal shares              :  0.3869 
Rho-squared vs observed shares               :  0.273 
Adj.Rho-squared vs observed shares           :  0.2723 
AIC                                         :  8539.74 
BIC                                         :  8580.66 

Estimated parameters                        : 6
Time taken (hh:mm:ss)                       :  00:02:8.6 
     pre-estimation                         :  00:00:41.4 
     estimation                             :  00:00:48.86 
          initial estimation                :  00:00:43.71 
          estimation after rescaling        :  00:00:5.15 
     post-estimation                        :  00:00:38.34 
Iterations                                  :  26  
     initial estimation                     :  25 
     estimation after rescaling             :  1 

Unconstrained optimisation.

Estimates:
             Estimate        s.e.   t.rat.(0)    Rob.s.e. Rob.t.rat.(0)
ASC_CAR        0.1857     0.05924       3.134      0.1189         1.561
ASC_TRAIN     -0.5281     0.08334      -6.337      0.1559        -3.387
ASC_SM         0.0000          NA          NA          NA            NA
B_COST        -2.4960     0.11755     -21.234      0.1671       -14.938
B_COST_S       1.6892     0.11439      14.767      0.2223         7.600
B_TIME        -3.5731     0.21919     -16.301      0.2760       -12.948
B_TIME_S       3.8988     0.19558      19.934      0.2600        14.995


Overview of choices for MNL model component :
                                    alt1    alt2    alt3
Times available                  6768.00 6768.00 5607.00
Times chosen                      908.00 4090.00 1770.00
Percentage chosen overall          13.42   60.43   26.15
Percentage chosen when available   13.42   60.43   31.57



Classical covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.003510    0.003102  1.1273e-04 -3.0824e-04   -0.005109
ASC_TRAIN    0.003102    0.006945   -0.001080   2.255e-05   -0.008361
B_COST     1.1273e-04   -0.001080    0.013817   -0.005428    0.018396
B_COST_S  -3.0824e-04   2.255e-05   -0.005428    0.013085   -0.005156
B_TIME      -0.005109   -0.008361    0.018396   -0.005156    0.048044
B_TIME_S   4.8570e-04   -0.002171   -0.005290    0.014068   -0.008821
             B_TIME_S
ASC_CAR    4.8570e-04
ASC_TRAIN   -0.002171
B_COST      -0.005290
B_COST_S     0.014068
B_TIME      -0.008821
B_TIME_S     0.038252

Robust covariance matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR      0.014146    0.011239    0.001154   -0.003510    -0.01840
ASC_TRAIN    0.011239    0.024308   -0.003365  -8.142e-05    -0.02686
B_COST       0.001154   -0.003365    0.027919   -0.005601     0.02212
B_COST_S    -0.003510  -8.142e-05   -0.005601    0.049408  8.3270e-04
B_TIME      -0.018398   -0.026864    0.022122  8.3270e-04     0.07615
B_TIME_S     0.001686   -0.004699   -0.006835    0.005365    -0.01021
             B_TIME_S
ASC_CAR      0.001686
ASC_TRAIN   -0.004699
B_COST      -0.006835
B_COST_S     0.005365
B_TIME      -0.010211
B_TIME_S     0.067603

Classical correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000    0.628350     0.01619   -0.045485     -0.3934
ASC_TRAIN     0.62835    1.000000    -0.11028    0.002366     -0.4577
B_COST        0.01619   -0.110280     1.00000   -0.403713      0.7140
B_COST_S     -0.04549    0.002366    -0.40371    1.000000     -0.2057
B_TIME       -0.39343   -0.457709     0.71398   -0.205655      1.0000
B_TIME_S      0.04192   -0.133186    -0.23008    0.628792     -0.2058
             B_TIME_S
ASC_CAR       0.04192
ASC_TRAIN    -0.13319
B_COST       -0.23008
B_COST_S      0.62879
B_TIME       -0.20577
B_TIME_S      1.00000

Robust correlation matrix:
              ASC_CAR   ASC_TRAIN      B_COST    B_COST_S      B_TIME
ASC_CAR       1.00000    0.606082     0.05806   -0.132768    -0.56056
ASC_TRAIN     0.60608    1.000000    -0.12917   -0.002349    -0.62441
B_COST        0.05806   -0.129170     1.00000   -0.150799     0.47978
B_COST_S     -0.13277   -0.002349    -0.15080    1.000000     0.01358
B_TIME       -0.56056   -0.624411     0.47978    0.013576     1.00000
B_TIME_S      0.05451   -0.115928    -0.15733    0.092831    -0.14232
             B_TIME_S
ASC_CAR       0.05451
ASC_TRAIN    -0.11593
B_COST       -0.15733
B_COST_S      0.09283
B_TIME       -0.14232
B_TIME_S      1.00000

 20 worst outliers in terms of lowest average per choice prediction:
  ID Avg prob per choice
 394           0.1055499
 104           0.1722494
 844           0.1723615
 102           0.1723854
  77           0.1724624
 351           0.1867444
  19           0.1880940
  56           0.2006760
 362           0.2078099
 105           0.2125986
 265           0.2145607
 548           0.2331619
 393           0.2337597
 375           0.2351830
 238           0.2353565
 937           0.2364676
 242           0.2404017
 283           0.2410692
 257           0.2413920
 731           0.2415229

Changes in parameter estimates from starting values:
              Initial    Estimate  Difference
ASC_CAR         0.000      0.1857      0.1857
ASC_TRAIN       0.000     -0.5281     -0.5281
ASC_SM          0.000      0.0000      0.0000
B_COST          0.000     -2.4960     -2.4960
B_COST_S        1.000      1.6892      0.6892
B_TIME          0.000     -3.5731     -3.5731
B_TIME_S        1.000      3.8988      2.8988

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                                         
modelName              "Swissmetro"                                                                  
modelDescr             "Mixed logit model on Swissmetro, uncorrelated Lognormals in preference space"
indivID                "ID"                                                                          
nCores                 "4"                                                                           
outputDirectory        "output/"                                                                     
mixing                 "TRUE"                                                                        
debug                  "FALSE"                                                                       
workInLogs             "FALSE"                                                                       
seed                   "13"                                                                          
HB                     "FALSE"                                                                       
noValidation           "FALSE"                                                                       
noDiagnostics          "FALSE"                                                                       
calculateLLC           "TRUE"                                                                        
panelData              "TRUE"                                                                        
analyticGrad           "TRUE"                                                                        
analyticGrad_manualSet "FALSE"                                                                       
overridePanel          "FALSE"                                                                       
preventOverridePanel   "FALSE"                                                                       
noModification         "FALSE"                                                                       

Hessian routines attempted
--------------------------
numerical jacobian of LL analytical gradient

Scaling in estimation
---------------------
              Value
ASC_CAR   0.1856565
ASC_TRAIN 0.5280815
B_COST    2.4959990
B_COST_S  1.6892260
B_TIME    3.5731070
B_TIME_S  3.8987610

Scaling used in computing Hessian
---------------------------------
              Value
ASC_CAR   0.1856565
ASC_TRAIN 0.5280815
B_COST    2.4959989
B_COST_S  1.6892260
B_TIME    3.5731069
B_TIME_S  3.8987612


apollo_randCoeff
------------------
function(apollo_beta, apollo_inputs){
  randcoeff = list()

  randcoeff[["B_TIME_RND"]] = B_TIME + B_TIME_S * draws
  randcoeff[["B_COST_RND"]] = B_COST + B_COST_S * draws

  return(randcoeff)
}
<bytecode: 0x00000241d7da45e0>


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){

  ### Function initialisation: do not change the following three commands
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()

  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["alt1"]] = ASC_TRAIN + B_TIME_RND * TRAIN_TT_SCALED + B_COST_RND * TRAIN_COST_SCALED
  V[["alt2"]] = ASC_SM + B_TIME_RND * SM_TT_SCALED + B_COST_RND * SM_COST_SCALED
  V[["alt3"]] = ASC_CAR + B_TIME_RND * CAR_TT_SCALED + B_COST_RND * CAR_CO_SCALED


  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(alt1=1, alt2=2, alt3=3),
    avail         = list(alt1=TRAIN_AV, alt2=SM_AV, alt3=CAR_AV),
    choiceVar     = CHOICE,
    utilities     = V
  )

  ### Compute probabilities using MNL model
  P[["model"]] = apollo_mnl(mnl_settings, functionality)
  
    ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)

  ### Average across inter-individual draws
  P = apollo_avgInterDraws(P, apollo_inputs, functionality)


  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
