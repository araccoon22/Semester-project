Model run by alexi using Apollo 0.3.1 on R 4.2.3 for Windows.
Please acknowledge the use of Apollo by citing Hess & Palma (2019)
  DOI 10.1016/j.jocm.2019.100170
  www.ApolloChoiceModelling.com

Model name                                  : MNL_SP_effects
Model description                           : Simple MNL model on mode choice SP data using effects coding
Model run at                                : 2024-02-29 11:32:52
Estimation method                           : bgw
Model diagnosis                             : Relative function convergence
Optimisation diagnosis                      : Maximum found
     hessian properties                     : Negative definite
     maximum eigenvalue                     : -3.30049
     reciprocal of condition number         : 2.99763e-08
Number of individuals                       : 500
Number of rows in database                  : 7000
Number of modelled outcomes                 : 7000

Number of cores used                        :  1 
Model without mixing

LL(start)                                   : -8196.02
LL at equal shares, LL(0)                   : -8196.02
LL at observed shares, LL(C)                : -6706.94
LL(final)                                   : -5598.9
Rho-squared vs equal shares                  :  0.3169 
Adj.Rho-squared vs equal shares              :  0.3155 
Rho-squared vs observed shares               :  0.1652 
Adj.Rho-squared vs observed shares           :  0.164 
AIC                                         :  11219.8 
BIC                                         :  11295.19 

Estimated parameters                        : 11
Time taken (hh:mm:ss)                       :  00:00:4.53 
     pre-estimation                         :  00:00:0.95 
     estimation                             :  00:00:2.11 
          initial estimation                :  00:00:1.74 
          estimation after rescaling        :  00:00:0.36 
     post-estimation                        :  00:00:1.47 
Iterations                                  :  10  
     initial estimation                     :  9 
     estimation after rescaling             :  1 

Unconstrained optimisation.

Estimates:


Overview of choices for MNL model component :
                                     car     bus     air    rail
Times available                  5446.00 6314.00 5264.00 6118.00
Times chosen                     1946.00  358.00 1522.00 3174.00
Percentage chosen overall          27.80    5.11   21.74   45.34
Percentage chosen when available   35.73    5.67   28.91   51.88



Classical covariance matrix:

Robust covariance matrix:

Classical correlation matrix:

Robust correlation matrix:

 20 worst outliers in terms of lowest average per choice prediction:

Changes in parameter estimates from starting values:

Settings and functions used in model definition:

apollo_control
--------------
                       Value                                                         
modelName              "MNL_SP_effects"                                              
modelDescr             "Simple MNL model on mode choice SP data using effects coding"
indivID                "ID"                                                          
outputDirectory        "output/"                                                     
debug                  "FALSE"                                                       
nCores                 "1"                                                           
workInLogs             "FALSE"                                                       
seed                   "13"                                                          
mixing                 "FALSE"                                                       
HB                     "FALSE"                                                       
noValidation           "FALSE"                                                       
noDiagnostics          "FALSE"                                                       
calculateLLC           "TRUE"                                                        
panelData              "TRUE"                                                        
analyticGrad           "TRUE"                                                        
analyticGrad_manualSet "FALSE"                                                       
overridePanel          "FALSE"                                                       
preventOverridePanel   "FALSE"                                                       
noModification         "FALSE"                                                       

Hessian routines attempted
--------------------------
numerical jacobian of LL analytical gradient

Scaling used in computing Hessian
---------------------------------
                Value
asc_bus   0.062410595
asc_air   0.687314860
asc_rail  1.032331312
b_tt_car  0.011602185
b_tt_bus  0.017368461
b_tt_air  0.019483368
b_tt_rail 0.006364931
b_access  0.023192675
b_cost    0.058755939
b_wifi    0.488517047
b_food    0.039478668


apollo_probabilities
----------------------
function(apollo_beta, apollo_inputs, functionality="estimate"){
    
  ### Attach inputs and detach after function exit
  apollo_attach(apollo_beta, apollo_inputs)
  on.exit(apollo_detach(apollo_beta, apollo_inputs))

  ### Create list of probabilities P
  P = list()
  
  ### Effects coding constraint
  b_no_frills = - b_wifi - b_food
  
  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
  V = list()
  V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
  V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus 
  V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air    + b_no_frills * ( service_air == 1 )  + b_wifi * ( service_air == 2 )  + b_food * ( service_air == 3 )
  V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail   + b_no_frills * ( service_rail == 1 ) + b_wifi * ( service_rail == 2 ) + b_food * ( service_rail == 3 )
  
  ### Define settings for MNL model component
  mnl_settings = list(
    alternatives  = c(car=1, bus=2, air=3, rail=4), 
    avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail), 
    choiceVar     = choice,
    utilities     = V
  )
  
  ### Compute probabilities using MNL model
  P[["model"]] = apollo_mnl(mnl_settings, functionality)
  
  ### Take product across observation for same individual
  P = apollo_panelProd(P, apollo_inputs, functionality)
  
  ### Prepare and return outputs of function
  P = apollo_prepareProb(P, apollo_inputs, functionality)
  return(P)
}
