P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
knitr::opts_chunk$set(echo = TRUE)
### Clear memory
rm(list = ls())
###Set time
start_time <- Sys.time()
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_RP",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID", #indicate which columns of the data is the decision maker
outputDirectory = "output"
)
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData #simulated dataset, 8'000 rows, 26 variables (25 + id)
database #long format
colnames(database) #see column names
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,database$RP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car   = 0,
asc_bus   = 0,
asc_air   = 0,
asc_rail  = 0,
b_tt_car  = 0,
b_tt_bus  = 0,
b_tt_air  = 0,
b_tt_rail = 0,
b_access  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car") #ASC that will not be estimated, should keep it empty (apollo_fixed = c() if all param need to be estimated)
apollo_inputs = apollo_validateInputs() #Searches the user work space (.GlobalEnv) for all necessary input to run apollo_estimate, and packs it in a single list.
#specific to the model we estimate, user needs to define apollo_probabilities by themself
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
knitr::opts_chunk$set(echo = TRUE)
### Clear memory
rm(list = ls())
###Set time
start_time <- Sys.time()
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_RP",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID", #indicate which columns of the data is the decision maker
outputDirectory = "output"
)
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData #simulated dataset, 8'000 rows, 26 variables (25 + id)
database #long format
colnames(database) #see column names
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,database$RP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car   = 0,
asc_bus   = 0,
asc_air   = 0,
asc_rail  = 0,
b_tt_car  = 0,
b_tt_bus  = 0,
b_tt_air  = 0,
b_tt_rail = 0,
b_access  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car") #ASC that will not be estimated, should keep it empty (apollo_fixed = c() if all param need to be estimated)
apollo_inputs = apollo_validateInputs() #Searches the user work space (.GlobalEnv) for all necessary input to run apollo_estimate, and packs it in a single list.
#specific to the model we estimate, user needs to define apollo_probabilities by themself
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
knitr::opts_chunk$set(echo = TRUE)
### Clear memory
rm(list = ls())
###Set time
start_time <- Sys.time()
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_RP",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID", #indicate which columns of the data is the decision maker
outputDirectory = "output"
)
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData #simulated dataset, 8'000 rows, 26 variables (25 + id)
database #long format
colnames(database) #see column names
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,database$RP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car   = 0,
asc_bus   = 0,
asc_air   = 0,
asc_rail  = 0,
b_tt_car  = 0,
b_tt_bus  = 0,
b_tt_air  = 0,
b_tt_rail = 0,
b_access  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car") #ASC that will not be estimated, should keep it empty (apollo_fixed = c() if all param need to be estimated)
apollo_inputs = apollo_validateInputs() #Searches the user work space (.GlobalEnv) for all necessary input to run apollo_estimate, and packs it in a single list.
#specific to the model we estimate, user needs to define apollo_probabilities by themself
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
knitr::opts_chunk$set(echo = TRUE)
### Clear memory
rm(list = ls())
###Set time
start_time <- Sys.time()
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_RP",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID", #indicate which columns of the data is the decision maker
outputDirectory = "output"
)
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData #simulated dataset, 8'000 rows, 26 variables (25 + id)
database #long format
colnames(database) #see column names
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,database$RP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car   = 0,
asc_bus   = 0,
asc_air   = 0,
asc_rail  = 0,
b_tt_car  = 0,
b_tt_bus  = 0,
b_tt_air  = 0,
b_tt_rail = 0,
b_access  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car") #ASC that will not be estimated, should keep it empty (apollo_fixed = c() if all param need to be estimated)
apollo_inputs = apollo_validateInputs() #Searches the user work space (.GlobalEnv) for all necessary input to run apollo_estimate, and packs it in a single list.
#specific to the model we estimate, user needs to define apollo_probabilities by themself
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
knitr::opts_chunk$set(echo = TRUE)
### Clear memory
rm(list = ls())
###Set time
start_time <- Sys.time()
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_RP",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID", #indicate which columns of the data is the decision maker
outputDirectory = "output"
)
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData #simulated dataset, 8'000 rows, 26 variables (25 + id)
database #long format
colnames(database) #see column names
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,database$RP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car   = 0,
asc_bus   = 0,
asc_air   = 0,
asc_rail  = 0,
b_tt_car  = 0,
b_tt_bus  = 0,
b_tt_air  = 0,
b_tt_rail = 0,
b_access  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car") #ASC that will not be estimated, should keep it empty (apollo_fixed = c() if all param need to be estimated)
apollo_inputs = apollo_validateInputs() #Searches the user work space (.GlobalEnv) for all necessary input to run apollo_estimate, and packs it in a single list.
#specific to the model we estimate, user needs to define apollo_probabilities by themself
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
knitr::opts_chunk$set(echo = TRUE)
### Clear memory
rm(list = ls())
###Set time
start_time <- Sys.time()
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_RP",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID", #indicate which columns of the data is the decision maker
outputDirectory = "output"
)
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData #simulated dataset, 8'000 rows, 26 variables (25 + id)
database #long format
colnames(database) #see column names
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,database$RP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car   = 0,
asc_bus   = 0,
asc_air   = 0,
asc_rail  = 0,
b_tt_car  = 0,
b_tt_bus  = 0,
b_tt_air  = 0,
b_tt_rail = 0,
b_access  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car") #ASC that will not be estimated, should keep it empty (apollo_fixed = c() if all param need to be estimated)
apollo_inputs = apollo_validateInputs() #Searches the user work space (.GlobalEnv) for all necessary input to run apollo_estimate, and packs it in a single list.
#specific to the model we estimate, user needs to define apollo_probabilities by themself
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
knitr::opts_chunk$set(echo = TRUE)
### Clear memory
rm(list = ls())
###Set time
start_time <- Sys.time()
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_RP",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID", #indicate which columns of the data is the decision maker
outputDirectory = "output"
)
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = apollo_modeChoiceData #simulated dataset, 8'000 rows, 26 variables (25 + id)
database #long format
colnames(database) #see column names
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,database$RP==1)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_car   = 0,
asc_bus   = 0,
asc_air   = 0,
asc_rail  = 0,
b_tt_car  = 0,
b_tt_bus  = 0,
b_tt_air  = 0,
b_tt_rail = 0,
b_access  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_car") #ASC that will not be estimated, should keep it empty (apollo_fixed = c() if all param need to be estimated)
apollo_inputs = apollo_validateInputs() #Searches the user work space (.GlobalEnv) for all necessary input to run apollo_estimate, and packs it in a single list.
#specific to the model we estimate, user needs to define apollo_probabilities by themself
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["car"]]  = asc_car  + b_tt_car  * time_car                           + b_cost * cost_car
V[["bus"]]  = asc_bus  + b_tt_bus  * time_bus  + b_access * access_bus  + b_cost * cost_bus
V[["air"]]  = asc_air  + b_tt_air  * time_air  + b_access * access_air  + b_cost * cost_air
V[["rail"]] = asc_rail + b_tt_rail * time_rail + b_access * access_rail + b_cost * cost_rail
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(car=1, bus=2, air=3, rail=4),
avail         = list(car=av_car, bus=av_bus, air=av_air, rail=av_rail),
choiceVar     = choice,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
end_time <- Sys.time()
end_time - start_time
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_saveOutput(model)
